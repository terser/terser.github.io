"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[308],{9690:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>t});var i=s(5893),d=s(1151);const o={id:"options",title:"Options",sidebar_label:"Options"},c=void 0,r={id:"options",title:"Options",description:"Parse options",source:"@site/docs/options.md",sourceDirName:".",slug:"/options",permalink:"/docs/options",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"options",title:"Options",sidebar_label:"Options"},sidebar:"tutorialSidebar",previous:{title:"Miscellaneous",permalink:"/docs/miscellaneous"},next:{title:"Reporting Issues",permalink:"/docs/reporting-issues"}},l={},t=[{value:"Parse options",id:"parse-options",level:2},{value:"Compress options",id:"compress-options",level:2},{value:"Mangle options",id:"mangle-options",level:2},{value:"Mangle properties options",id:"mangle-properties-options",level:3},{value:"Format options",id:"format-options",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"parse-options",children:"Parse options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bare_returns"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- support top level ",(0,i.jsx)(n.code,{children:"return"})," statements"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"html5_comments"})," (default ",(0,i.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"shebang"})," (default ",(0,i.jsx)(n.code,{children:"true"}),") -- support ",(0,i.jsx)(n.code,{children:"#!command"})," as the first line"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"spidermonkey"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- accept a Spidermonkey (Mozilla) AST"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"compress-options",children:"Compress options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"defaults"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Pass ",(0,i.jsx)(n.code,{children:"false"})," to disable most default\nenabled ",(0,i.jsx)(n.code,{children:"compress"})," transforms. Useful when you only want to enable a few\n",(0,i.jsx)(n.code,{children:"compress"})," options while disabling the rest."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"arrows"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Class and object literal methods are converted\nwill also be converted to arrow expressions if the resultant code is shorter:\n",(0,i.jsx)(n.code,{children:"m(){return x}"})," becomes ",(0,i.jsx)(n.code,{children:"m:()=>x"}),". To do this to regular ES5 functions which\ndon't use ",(0,i.jsx)(n.code,{children:"this"})," or ",(0,i.jsx)(n.code,{children:"arguments"}),", see ",(0,i.jsx)(n.code,{children:"unsafe_arrows"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"arguments"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- replace ",(0,i.jsx)(n.code,{children:"arguments[index]"})," with function\nparameter name whenever possible."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"booleans"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- various optimizations for boolean context,\nfor example ",(0,i.jsx)(n.code,{children:"!!a ? b : c \u2192 a ? b : c"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"booleans_as_integers"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Turn booleans into 0 and 1, also\nmakes comparisons with booleans use ",(0,i.jsx)(n.code,{children:"=="})," and ",(0,i.jsx)(n.code,{children:"!="})," instead of ",(0,i.jsx)(n.code,{children:"==="})," and ",(0,i.jsx)(n.code,{children:"!=="}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"collapse_vars"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Collapse single-use non-constant variables,\nside effects permitting."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"comparisons"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- apply certain optimizations to binary nodes,\ne.g. ",(0,i.jsx)(n.code,{children:"!(a <= b) \u2192 a > b"})," (only when ",(0,i.jsx)(n.code,{children:"unsafe_comps"}),"), attempts to negate binary\nnodes, e.g. ",(0,i.jsx)(n.code,{children:"a = !b && !c && !d && !e \u2192 a=!(b||c||d||e)"})," etc. Note: ",(0,i.jsx)(n.code,{children:"comparisons"}),"\nworks best with ",(0,i.jsx)(n.code,{children:"lhs_constants"})," enabled."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"computed_props"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Transforms constant computed properties\ninto regular ones: ",(0,i.jsx)(n.code,{children:'{["computed"]: 1}'})," is converted to ",(0,i.jsx)(n.code,{children:"{computed: 1}"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"conditionals"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- apply optimizations for ",(0,i.jsx)(n.code,{children:"if"}),"-s and conditional\nexpressions"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dead_code"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- remove unreachable code"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"directives"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- remove redundant or non-standard directives"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"drop_console"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to discard calls to\n",(0,i.jsx)(n.code,{children:"console.*"})," functions. If you only want to discard a portion of console,\nyou can pass an array like this ",(0,i.jsx)(n.code,{children:"['log', 'info']"}),", which will only discard ",(0,i.jsx)(n.code,{children:"console.log"}),"\u3001 ",(0,i.jsx)(n.code,{children:"console.info"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"drop_debugger"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- remove ",(0,i.jsx)(n.code,{children:"debugger;"})," statements"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ecma"})," (default: ",(0,i.jsx)(n.code,{children:"5"}),") -- Pass ",(0,i.jsx)(n.code,{children:"2015"})," or greater to enable ",(0,i.jsx)(n.code,{children:"compress"})," options that\nwill transform ES5 code into smaller ES6+ equivalent forms."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"evaluate"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- attempt to evaluate constant expressions"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"expression"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to preserve completion values\nfrom terminal statements without ",(0,i.jsx)(n.code,{children:"return"}),", e.g. in bookmarklets."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"global_defs"})," (default: ",(0,i.jsx)(n.code,{children:"{}"}),") -- see ",(0,i.jsx)(n.a,{href:"/docs/miscellaneous#conditional-compilation",children:"conditional compilation"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hoist_funs"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- hoist function declarations"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hoist_props"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- hoist properties from constant object and\narray literals into regular variables subject to a set of constraints. For example:\n",(0,i.jsx)(n.code,{children:"var o={p:1, q:2}; f(o.p, o.q);"})," is converted to ",(0,i.jsx)(n.code,{children:"f(1, 2);"}),". Note: ",(0,i.jsx)(n.code,{children:"hoist_props"}),"\nworks best with ",(0,i.jsx)(n.code,{children:"mangle"})," enabled, the ",(0,i.jsx)(n.code,{children:"compress"})," option ",(0,i.jsx)(n.code,{children:"passes"})," set to ",(0,i.jsx)(n.code,{children:"2"})," or higher,\nand the ",(0,i.jsx)(n.code,{children:"compress"})," option ",(0,i.jsx)(n.code,{children:"toplevel"})," enabled."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hoist_vars"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- hoist ",(0,i.jsx)(n.code,{children:"var"})," declarations (this is ",(0,i.jsx)(n.code,{children:"false"}),"\nby default because it seems to increase the size of the output in general)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"if_return"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- optimizations for if/return and if/continue"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"inline"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- inline calls to function with simple/",(0,i.jsx)(n.code,{children:"return"})," statement:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"})," -- same as ",(0,i.jsx)(n.code,{children:"0"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"})," -- disabled inlining"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"})," -- inline simple functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"})," -- inline functions with arguments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"})," -- inline functions with arguments and variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," -- same as ",(0,i.jsx)(n.code,{children:"3"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"join_vars"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- join consecutive ",(0,i.jsx)(n.code,{children:"var"}),", ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," statements"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_classnames"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to prevent the compressor from\ndiscarding class names. Pass a regular expression to only keep class names matching\nthat regex. See also: the ",(0,i.jsx)(n.code,{children:"keep_classnames"})," ",(0,i.jsx)(n.a,{href:"/docs/options#mangle-options",children:"mangle option"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_fargs"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Prevents the compressor from discarding unused\nfunction arguments.  You need this for code which relies on ",(0,i.jsx)(n.code,{children:"Function.length"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_fnames"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to prevent the\ncompressor from discarding function names. Pass a regular expression to only keep\nfunction names matching that regex. Useful for code relying on ",(0,i.jsx)(n.code,{children:"Function.prototype.name"}),".\nSee also: the ",(0,i.jsx)(n.code,{children:"keep_fnames"})," ",(0,i.jsx)(n.a,{href:"/docs/options#mangle-options",children:"mangle option"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_infinity"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to prevent ",(0,i.jsx)(n.code,{children:"Infinity"})," from\nbeing compressed into ",(0,i.jsx)(n.code,{children:"1/0"}),", which may cause performance issues on Chrome."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"lhs_constants"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Moves constant values to the left-hand side\nof binary nodes. ",(0,i.jsx)(n.code,{children:"foo == 42 \u2192 42 == foo"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"loops"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- optimizations for ",(0,i.jsx)(n.code,{children:"do"}),", ",(0,i.jsx)(n.code,{children:"while"})," and ",(0,i.jsx)(n.code,{children:"for"})," loops\nwhen we can statically determine the condition."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"module"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," when compressing an ES6 module. Strict\nmode is implied and the ",(0,i.jsx)(n.code,{children:"toplevel"})," option as well."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"negate_iife"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),') -- negate "Immediately-Called Function Expressions"\nwhere the return value is discarded, to avoid the parens that the\ncode generator would insert.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"passes"})," (default: ",(0,i.jsx)(n.code,{children:"1"}),") -- The maximum number of times to run compress.\nIn some cases more than one pass leads to further compressed code.  Keep in\nmind more passes will take more time."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"properties"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- rewrite property access using the dot notation, for\nexample ",(0,i.jsx)(n.code,{children:'foo["bar"] \u2192 foo.bar'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pure_funcs"})," (default: ",(0,i.jsx)(n.code,{children:"null"}),") -- You can pass an array of names and\nTerser will assume that those functions do not produce side\neffects.  DANGER: will not check if the name is redefined in scope.\nAn example case here, for instance ",(0,i.jsx)(n.code,{children:"var q = Math.floor(a/b)"}),".  If\nvariable ",(0,i.jsx)(n.code,{children:"q"})," is not used elsewhere, Terser will drop it, but will\nstill keep the ",(0,i.jsx)(n.code,{children:"Math.floor(a/b)"}),", not knowing what it does.  You can\npass ",(0,i.jsx)(n.code,{children:"pure_funcs: [ 'Math.floor' ]"})," to let it know that this\nfunction won't produce any side effect, in which case the whole\nstatement would get discarded.  The current implementation adds some\noverhead (compression will be slower)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pure_getters"})," (default: ",(0,i.jsx)(n.code,{children:'"strict"'}),") -- If you pass ",(0,i.jsx)(n.code,{children:"true"})," for\nthis, Terser will assume that object property access\n(e.g. ",(0,i.jsx)(n.code,{children:"foo.bar"})," or ",(0,i.jsx)(n.code,{children:'foo["bar"]'}),") doesn't have any side effects.\nSpecify ",(0,i.jsx)(n.code,{children:'"strict"'})," to treat ",(0,i.jsx)(n.code,{children:"foo.bar"})," as side-effect-free only when\n",(0,i.jsx)(n.code,{children:"foo"})," is certain to not throw, i.e. not ",(0,i.jsx)(n.code,{children:"null"})," or ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pure_new"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Set to ",(0,i.jsx)(n.code,{children:"true"})," to assume ",(0,i.jsx)(n.code,{children:"new X()"})," never has\nside effects."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reduce_vars"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Improve optimization on variables assigned with and\nused as constant values."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reduce_funcs"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Inline single-use functions when\npossible. Depends on ",(0,i.jsx)(n.code,{children:"reduce_vars"})," being enabled.  Disabling this option\nsometimes improves performance of the output code."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"sequences"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- join consecutive simple statements using the\ncomma operator.  May be set to a positive integer to specify the maximum number\nof consecutive comma sequences that will be generated. If this option is set to\n",(0,i.jsx)(n.code,{children:"true"})," then the default ",(0,i.jsx)(n.code,{children:"sequences"})," limit is ",(0,i.jsx)(n.code,{children:"200"}),". Set option to ",(0,i.jsx)(n.code,{children:"false"})," or ",(0,i.jsx)(n.code,{children:"0"}),"\nto disable. The smallest ",(0,i.jsx)(n.code,{children:"sequences"})," length is ",(0,i.jsx)(n.code,{children:"2"}),". A ",(0,i.jsx)(n.code,{children:"sequences"})," value of ",(0,i.jsx)(n.code,{children:"1"}),"\nis grandfathered to be equivalent to ",(0,i.jsx)(n.code,{children:"true"})," and as such means ",(0,i.jsx)(n.code,{children:"200"}),". On rare\noccasions the default sequences limit leads to very slow compress times in which\ncase a value of ",(0,i.jsx)(n.code,{children:"20"})," or less is recommended."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"side_effects"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Remove expressions which have no side effects\nand whose results aren't used."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"switches"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- de-duplicate and remove unreachable ",(0,i.jsx)(n.code,{children:"switch"})," branches"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"toplevel"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- drop unreferenced functions (",(0,i.jsx)(n.code,{children:'"funcs"'}),") and/or\nvariables (",(0,i.jsx)(n.code,{children:'"vars"'}),") in the top level scope (",(0,i.jsx)(n.code,{children:"false"})," by default, ",(0,i.jsx)(n.code,{children:"true"})," to drop\nboth unreferenced functions and variables)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"top_retain"})," (default: ",(0,i.jsx)(n.code,{children:"null"}),") -- prevent specific toplevel functions and\nvariables from ",(0,i.jsx)(n.code,{children:"unused"})," removal (can be array, comma-separated, RegExp or\nfunction. Implies ",(0,i.jsx)(n.code,{children:"toplevel"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"typeofs"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- Transforms ",(0,i.jsx)(n.code,{children:'typeof foo == "undefined"'})," into\n",(0,i.jsx)(n.code,{children:"foo === void 0"}),".  Note: recommend to set this value to ",(0,i.jsx)(n.code,{children:"false"})," for IE10 and\nearlier versions due to known issues."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),') -- apply "unsafe" transformations\n(',(0,i.jsx)(n.a,{href:"/docs/miscellaneous#the-unsafe-compress-option",children:"details"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_arrows"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Convert ES5 style anonymous function\nexpressions to arrow functions if the function body does not reference ",(0,i.jsx)(n.code,{children:"this"}),".\nNote: it is not always safe to perform this conversion if code relies on the\nthe function having a ",(0,i.jsx)(n.code,{children:"prototype"}),", which arrow functions lack.\nThis transform requires that the ",(0,i.jsx)(n.code,{children:"ecma"})," compress option is set to ",(0,i.jsx)(n.code,{children:"2015"})," or greater."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_comps"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- Reverse ",(0,i.jsx)(n.code,{children:"<"})," and ",(0,i.jsx)(n.code,{children:"<="})," to ",(0,i.jsx)(n.code,{children:">"})," and ",(0,i.jsx)(n.code,{children:">="})," to\nallow improved compression. This might be unsafe when an at least one of two\noperands is an object with computed values due the use of methods like ",(0,i.jsx)(n.code,{children:"get"}),",\nor ",(0,i.jsx)(n.code,{children:"valueOf"}),". This could cause change in execution order after operands in the\ncomparison are switching. Or if one of two operands is ",(0,i.jsx)(n.code,{children:"NaN"}),", the result is always\n",(0,i.jsx)(n.code,{children:"false"}),". Compression only works if both ",(0,i.jsx)(n.code,{children:"comparisons"})," and\n",(0,i.jsx)(n.code,{children:"unsafe_comps"})," are both set to true."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_Function"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- compress and mangle ",(0,i.jsx)(n.code,{children:"Function(args, code)"}),"\nwhen both ",(0,i.jsx)(n.code,{children:"args"})," and ",(0,i.jsx)(n.code,{children:"code"})," are string literals."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_math"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- optimize numerical expressions like\n",(0,i.jsx)(n.code,{children:"2 * x * 3"})," into ",(0,i.jsx)(n.code,{children:"6 * x"}),", which may give imprecise floating point results."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_symbols"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- removes keys from native Symbol\ndeclarations, e.g ",(0,i.jsx)(n.code,{children:'Symbol("kDog")'})," becomes ",(0,i.jsx)(n.code,{children:"Symbol()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_methods"})," (default: false) -- Converts ",(0,i.jsx)(n.code,{children:"{ m: function(){} }"})," to\n",(0,i.jsx)(n.code,{children:"{ m(){} }"}),". ",(0,i.jsx)(n.code,{children:"ecma"})," must be set to ",(0,i.jsx)(n.code,{children:"6"})," or greater to enable this transform.\nIf ",(0,i.jsx)(n.code,{children:"unsafe_methods"}),' is a RegExp then key/value pairs with keys matching the\nRegExp will be converted to concise methods.\nNote: if enabled there is a risk of getting a "',(0,i.jsx)(n.code,{children:"<method name>"}),' is not a\nconstructor" TypeError should any code try to ',(0,i.jsx)(n.code,{children:"new"})," the former function."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_proto"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- optimize expressions like\n",(0,i.jsx)(n.code,{children:"Array.prototype.slice.call(a)"})," into ",(0,i.jsx)(n.code,{children:"[].slice.call(a)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_regexp"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- enable substitutions of variables with\n",(0,i.jsx)(n.code,{children:"RegExp"})," values the same way as if they are constants."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsafe_undefined"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") -- substitute ",(0,i.jsx)(n.code,{children:"void 0"})," if there is a\nvariable named ",(0,i.jsx)(n.code,{children:"undefined"})," in scope (variable name will be mangled, typically\nreduced to a single character)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unused"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),") -- drop unreferenced functions and variables (simple\ndirect variable assignments do not count as references unless set to ",(0,i.jsx)(n.code,{children:'"keep_assign"'}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"mangle-options",children:"Mangle options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"eval"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to mangle names visible in scopes\nwhere ",(0,i.jsx)(n.code,{children:"eval"})," or ",(0,i.jsx)(n.code,{children:"with"})," are used."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_classnames"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to not mangle class names.\nPass a regular expression to only keep class names matching that regex.\nSee also: the ",(0,i.jsx)(n.code,{children:"keep_classnames"})," ",(0,i.jsx)(n.a,{href:"/docs/options#compress-options",children:"compress option"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_fnames"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to not mangle function names.\nPass a regular expression to only keep function names matching that regex.\nUseful for code relying on ",(0,i.jsx)(n.code,{children:"Function.prototype.name"}),". See also: the ",(0,i.jsx)(n.code,{children:"keep_fnames"}),"\n",(0,i.jsx)(n.a,{href:"/docs/options#compress-options",children:"compress option"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"module"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," an ES6 modules, where the toplevel\nscope is not the global scope. Implies ",(0,i.jsx)(n.code,{children:"toplevel"})," and assumes input code is strict mode JS."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"nth_identifier"})," (default: an internal mangler that weights based on character\nfrequency analysis) -- Pass an object with a ",(0,i.jsx)(n.code,{children:"get(n)"})," function that converts an\nordinal into the nth most favored (usually shortest) identifier.\nOptionally also provide ",(0,i.jsx)(n.code,{children:"reset()"}),", ",(0,i.jsx)(n.code,{children:"sort()"}),", and ",(0,i.jsx)(n.code,{children:"consider(chars, delta)"})," to\nuse character frequency analysis of the source code."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reserved"})," (default ",(0,i.jsx)(n.code,{children:"[]"}),") -- Pass an array of identifiers that should be\nexcluded from mangling. Example: ",(0,i.jsx)(n.code,{children:'["foo", "bar"]'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"toplevel"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to mangle names declared in the\ntop level scope."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"safari10"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Pass ",(0,i.jsx)(n.code,{children:"true"})," to work around the Safari 10 loop\niterator ",(0,i.jsx)(n.a,{href:"https://bugs.webkit.org/show_bug.cgi?id=171041",children:"bug"}),'\n"Cannot declare a let variable twice".\nSee also: the ',(0,i.jsx)(n.code,{children:"safari10"})," ",(0,i.jsx)(n.a,{href:"/docs/options#format-options",children:"format option"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// test.js\nvar globalVar;\nfunction funcName(firstLongName, anotherLongName) {\n    var myVariable = firstLongName +  anotherLongName;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"var code = fs.readFileSync(\"test.js\", \"utf8\");\n\nawait minify(code).code;\n// 'function funcName(a,n){}var globalVar;'\n\nawait minify(code, { mangle: { reserved: ['firstLongName'] } }).code;\n// 'function funcName(firstLongName,a){}var globalVar;'\n\nawait minify(code, { mangle: { toplevel: true } }).code;\n// 'function n(n,a){}var a;'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mangle-properties-options",children:"Mangle properties options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"builtins"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") \u2014 Use ",(0,i.jsx)(n.code,{children:"true"})," to allow the mangling of builtin\nDOM properties. Not recommended to override this setting."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"debug"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") \u2014 Mangle names with the original name still present.\nPass an empty string ",(0,i.jsx)(n.code,{children:'""'})," to enable, or a non-empty string to set the debug suffix."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_quoted"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") \u2014 How quoting properties (",(0,i.jsx)(n.code,{children:'{"prop": ...}'})," and ",(0,i.jsx)(n.code,{children:'obj["prop"]'}),") controls what gets mangled."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"strict"'})," (recommended) -- ",(0,i.jsx)(n.code,{children:"obj.prop"})," is mangled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"})," -- ",(0,i.jsx)(n.code,{children:'obj["prop"]'})," is mangled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," -- ",(0,i.jsx)(n.code,{children:"obj.prop"})," is mangled unless there is ",(0,i.jsx)(n.code,{children:'obj["prop"]'})," elsewhere in the code."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"nth_identifier"})," (default: an internal mangler that weights based on character\nfrequency analysis) -- Pass an object with a ",(0,i.jsx)(n.code,{children:"get(n)"})," function that converts an\nordinal into the nth most favored (usually shortest) identifier.\nOptionally also provide ",(0,i.jsx)(n.code,{children:"reset()"}),", ",(0,i.jsx)(n.code,{children:"sort()"}),", and ",(0,i.jsx)(n.code,{children:"consider(chars, delta)"})," to\nuse character frequency analysis of the source code."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"regex"})," (default: ",(0,i.jsx)(n.code,{children:"null"}),") \u2014 Pass a ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",children:"RegExp literal or pattern string"})," to only mangle property matching the regular expression."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reserved"})," (default: ",(0,i.jsx)(n.code,{children:"[]"}),") \u2014 Do not mangle property names listed in the\n",(0,i.jsx)(n.code,{children:"reserved"})," array."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"undeclared"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),") - Mangle those names when they are accessed\nas properties of known top level variables but their declarations are never\nfound in input code. May be useful when only minifying parts of a project.\nSee ",(0,i.jsx)(n.a,{href:"https://github.com/terser/terser/issues/397",children:"#397"})," for more details."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"format-options",children:"Format options"}),"\n",(0,i.jsx)(n.p,{children:'These options control the format of Terser\'s output code. Previously known\nas "output options".'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ascii_only"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- escape Unicode characters in strings and\nregexps (affects directives with non-ascii characters becoming invalid)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"beautify"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- (DEPRECATED) whether to beautify the output.\nWhen using the legacy ",(0,i.jsx)(n.code,{children:"-b"})," CLI flag, this is set to true by default."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"braces"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- always insert braces in ",(0,i.jsx)(n.code,{children:"if"}),", ",(0,i.jsx)(n.code,{children:"for"}),",\n",(0,i.jsx)(n.code,{children:"do"}),", ",(0,i.jsx)(n.code,{children:"while"})," or ",(0,i.jsx)(n.code,{children:"with"})," statements, even if their body is a single\nstatement."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"comments"})," (default ",(0,i.jsx)(n.code,{children:'"some"'}),') -- by default it keeps JSDoc-style comments\nthat contain "@license", "@copyright", "@preserve" or start with ',(0,i.jsx)(n.code,{children:"!"}),", pass ",(0,i.jsx)(n.code,{children:"true"}),"\nor ",(0,i.jsx)(n.code,{children:'"all"'})," to preserve all comments, ",(0,i.jsx)(n.code,{children:"false"})," to omit comments in the output,\na regular expression string (e.g. ",(0,i.jsx)(n.code,{children:"/^!/"}),") or a function."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ecma"})," (default ",(0,i.jsx)(n.code,{children:"5"}),") -- set desired EcmaScript standard version for output.\nSet ",(0,i.jsx)(n.code,{children:"ecma"})," to ",(0,i.jsx)(n.code,{children:"2015"})," or greater to emit shorthand object properties - i.e.:\n",(0,i.jsx)(n.code,{children:"{a}"})," instead of ",(0,i.jsx)(n.code,{children:"{a: a}"}),".  The ",(0,i.jsx)(n.code,{children:"ecma"})," option will only change the output in\ndirect control of the beautifier. Non-compatible features in your input will\nstill be output as is. For example: an ",(0,i.jsx)(n.code,{children:"ecma"})," setting of ",(0,i.jsx)(n.code,{children:"5"})," will ",(0,i.jsx)(n.strong,{children:"not"}),"\nconvert modern code to ES5."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"indent_level"})," (default ",(0,i.jsx)(n.code,{children:"4"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"indent_start"})," (default ",(0,i.jsx)(n.code,{children:"0"}),") -- prefix all lines by that many spaces"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"inline_script"})," (default ",(0,i.jsx)(n.code,{children:"true"}),") -- escape HTML comments and the slash in\noccurrences of ",(0,i.jsx)(n.code,{children:"<\/script>"})," in strings"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_numbers"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- keep number literals as it was in original code\n(disables optimizations like converting ",(0,i.jsx)(n.code,{children:"1000000"})," into ",(0,i.jsx)(n.code,{children:"1e6"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keep_quoted_props"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- when turned on, prevents stripping\nquotes from property names in object literals."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"max_line_len"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- maximum line length (for minified code)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"preamble"})," (default ",(0,i.jsx)(n.code,{children:"null"}),") -- when passed it must be a string and\nit will be prepended to the output literally.  The source map will\nadjust for this text.  Can be used to insert a comment containing\nlicensing information, for example."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"quote_keys"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- pass ",(0,i.jsx)(n.code,{children:"true"})," to quote all keys in literal\nobjects"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"quote_style"})," (default ",(0,i.jsx)(n.code,{children:"0"}),") -- preferred quote style for strings (affects\nquoted property names and directives as well):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"})," -- prefers double quotes, switches to single quotes when there are\nmore double quotes in the string itself. ",(0,i.jsx)(n.code,{children:"0"})," is best for gzip size."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"})," -- always use single quotes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"})," -- always use double quotes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"})," -- always use the original quotes"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"preserve_annotations"})," -- (default ",(0,i.jsx)(n.code,{children:"false"}),") -- Preserve ",(0,i.jsx)(n.a,{href:"/docs/miscellaneous#annotations",children:"Terser annotations"})," in the output."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"safari10"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- set this option to ",(0,i.jsx)(n.code,{children:"true"})," to work around\nthe ",(0,i.jsx)(n.a,{href:"https://bugs.webkit.org/show_bug.cgi?id=176685",children:"Safari 10/11 await bug"}),".\nSee also: the ",(0,i.jsx)(n.code,{children:"safari10"})," ",(0,i.jsx)(n.a,{href:"/docs/options#mangle-options",children:"mangle option"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"semicolons"})," (default ",(0,i.jsx)(n.code,{children:"true"}),") -- separate statements with semicolons.  If\nyou pass ",(0,i.jsx)(n.code,{children:"false"})," then whenever possible we will use a newline instead of a\nsemicolon, leading to more readable output of minified code (size before\ngzip could be smaller; size after gzip insignificantly larger)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"shebang"})," (default ",(0,i.jsx)(n.code,{children:"true"}),") -- preserve shebang ",(0,i.jsx)(n.code,{children:"#!"})," in preamble (bash scripts)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"spidermonkey"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- produce a Spidermonkey (Mozilla) AST"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"webkit"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- enable workarounds for WebKit bugs.\nPhantomJS users should set this option to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"wrap_iife"})," (default ",(0,i.jsx)(n.code,{children:"false"}),") -- pass ",(0,i.jsx)(n.code,{children:"true"})," to wrap immediately invoked\nfunction expressions. See\n",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2/issues/640",children:"#640"})," for more details."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"wrap_func_args"})," (default ",(0,i.jsx)(n.code,{children:"true"}),") -- pass ",(0,i.jsx)(n.code,{children:"false"})," if you do not want to wrap\nfunction expressions that are passed as arguments, in parenthesis. See\n",(0,i.jsx)(n.a,{href:"https://github.com/nolanlawson/optimize-js",children:"OptimizeJS"})," for more details."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>c});var i=s(7294);const d={},o=i.createContext(d);function c(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);